# This script identifies active AD users and exports detailed information to a CSV file

# Import the Active Directory module
Import-Module ActiveDirectory

# Set the timeframe for "active" accounts (120 days)
$ActiveTimeframe = (Get-Date).AddDays(-120)

# Create output directory if it doesn't exist
$OutputDir = "$env:USERPROFILE\Documents\AD_Assessment"
if (!(Test-Path $OutputDir)) {
    New-Item -ItemType Directory -Path $OutputDir | Out-Null
}

# Timestamp for file naming
$Timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$OutputFile = "$OutputDir\AD_User_Assessment_$Timestamp.csv"

Write-Host "Starting Active Directory user assessment..." -ForegroundColor Green

# Get all enabled user accounts with recent activity
$AllUsers = Get-ADUser -Filter {
    Enabled -eq $true -and 
    (LastLogonTimeStamp -ge $ActiveTimeframe -or PasswordLastSet -ge $ActiveTimeframe)
} -Properties SamAccountName, DisplayName, UserPrincipalName, Description, Title, Department, 
    Manager, LastLogonDate, LastLogonTimeStamp, PasswordLastSet, PasswordNeverExpires, 
    MemberOf, Created, Modified, DistinguishedName, AccountExpirationDate, 
    adminCount, LogonCount, ServicePrincipalNames

Write-Host "Found $($AllUsers.Count) active user accounts..." -ForegroundColor Cyan

# Initialize array to hold user details
$UserDetails = @()

# Process each user
$Counter = 0
$TotalUsers = $AllUsers.Count

foreach ($User in $AllUsers) {
    $Counter++
    Write-Progress -Activity "Processing Users" -Status "Processing $Counter of $TotalUsers" -PercentComplete (($Counter / $TotalUsers) * 100)
    
    # Get group memberships
    $Groups = ($User.MemberOf | ForEach-Object { (Get-ADGroup $_).Name }) -join '; '
    
    # Determine if admin account based on group memberships or naming convention
    $IsAdmin = $false
    $AdminGroups = @("Domain Admins", "Enterprise Admins", "Schema Admins", "Administrators", "Backup Operators", "Server Operators")
    
    foreach ($AdminGroup in $AdminGroups) {
        if ($Groups -like "*$AdminGroup*") {
            $IsAdmin = $true
            break
        }
    }
    
    # Check for admin naming conventions (customize as needed)
    if ($User.SamAccountName -like "admin-*" -or 
        $User.SamAccountName -like "*-admin" -or 
        $User.SamAccountName -like "a-*" -or 
        $User.DisplayName -like "*Administrator*") {
        $IsAdmin = $true
    }
    
    # Determine if service account based on naming convention or description
    $IsService = $false
    if ($User.SamAccountName -like "svc-*" -or 
        $User.SamAccountName -like "srvc-*" -or 
        $User.SamAccountName -like "service-*" -or 
        $User.Description -like "*service account*" -or 
        $User.Description -like "*automated*" -or 
        $User.ServicePrincipalNames.Count -gt 0) {
        $IsService = $true
    }
    
    # Get systems where service account is used (for service accounts)
    $SystemsUsed = "N/A"
    $ServicePurpose = "N/A"
    
    if ($IsService) {
        # Extract purpose from description
        if ($User.Description) {
            $ServicePurpose = $User.Description
        }
        
        # Check for SPNs which indicate systems usage
        if ($User.ServicePrincipalNames.Count -gt 0) {
            $SystemsUsed = ($User.ServicePrincipalNames | ForEach-Object {
                if ($_ -match '\/(.+)') {
                    $matches[1].Split(':')[0]
                }
            } | Sort-Object -Unique) -join '; '
            
            # If no systems found, check for common service patterns
            if ($SystemsUsed -eq "") {
                $SystemsUsed = "SPN present but no specific systems identified"
            }
        }
        
        # Check computer objects with service account in description
        try {
            $ComputersWithReference = Get-ADComputer -Filter "Description -like '*$($User.SamAccountName)*'" -Properties Description
            if ($ComputersWithReference.Count -gt 0) {
                $SystemsUsed = ($ComputersWithReference | ForEach-Object { $_.Name }) -join '; '
            }
        } catch {
            # Do nothing on error
        }
    }
    
    # Determine account type
    $AccountType = "Standard User"
    if ($IsAdmin) { 
        $AccountType = "Admin/Secondary Account" 
    } elseif ($IsService) { 
        $AccountType = "Service Account" 
    }
    
    # Get manager name if available
    $ManagerName = "N/A"
    if ($User.Manager) {
        try {
            $ManagerName = (Get-ADUser $User.Manager -Properties DisplayName).DisplayName
        } catch {
            $ManagerName = "Error retrieving manager"
        }
    }
    
    # Create user detail object
    $UserDetail = [PSCustomObject]@{
        SamAccountName = $User.SamAccountName
        DisplayName = $User.DisplayName
        UserPrincipalName = $User.UserPrincipalName
        AccountType = $AccountType
        Title = $User.Title
        Department = $User.Department
        Manager = $ManagerName
        LastLogonDate = $User.LastLogonDate
        DaysSinceLastLogon = if ($User.LastLogonDate) { (New-TimeSpan -Start $User.LastLogonDate -End (Get-Date)).Days } else { "Never" }
        PasswordLastSet = $User.PasswordLastSet
        DaysSincePasswordSet = if ($User.PasswordLastSet) { (New-TimeSpan -Start $User.PasswordLastSet -End (Get-Date)).Days } else { "Never" }
        PasswordNeverExpires = $User.PasswordNeverExpires
        AccountCreated = $User.Created
        AccountModified = $User.Modified
        AccountAgeInDays = (New-TimeSpan -Start $User.Created -End (Get-Date)).Days
        AccountExpirationDate = if ($User.AccountExpirationDate) { $User.AccountExpirationDate } else { "Never" }
        AdminCount = $User.adminCount
        LogonCount = $User.LogonCount
        IsAdminAccount = $IsAdmin
        IsServiceAccount = $IsService
        ServiceAccountSystems = $SystemsUsed
        ServiceAccountPurpose = $ServicePurpose
        GroupMemberships = $Groups
    }
    
    # Add to details array
    $UserDetails += $UserDetail
}

# Export to CSV
$UserDetails | Export-Csv -Path $OutputFile -NoTypeInformation

# Create summary report
$StandardUsers = ($UserDetails | Where-Object { $_.AccountType -eq "Standard User" }).Count
$AdminAccounts = ($UserDetails | Where-Object { $_.AccountType -eq "Admin/Secondary Account" }).Count
$ServiceAccounts = ($UserDetails | Where-Object { $_.AccountType -eq "Service Account" }).Count

$SummaryFile = "$OutputDir\AD_User_Assessment_Summary_$Timestamp.txt"
$Summary = @"
Active Directory User Assessment Summary
Generated: $(Get-Date)

Total Active Accounts: $($UserDetails.Count)
- Standard User Accounts: $StandardUsers
- Admin/Secondary Accounts: $AdminAccounts
- Service Accounts: $ServiceAccounts

Detailed information has been exported to: $OutputFile
"@

$Summary | Out-File -FilePath $SummaryFile

Write-Host "Assessment complete!" -ForegroundColor Green
Write-Host "Detailed CSV report saved to: $OutputFile" -ForegroundColor Yellow
Write-Host "Summary report saved to: $SummaryFile" -ForegroundColor Yellow
