PS C:\Users\aa-vnasta-som> C:\Users\aa-vnasta-som\Desktop\AD-Assessment.ps1
At C:\Users\aa-vnasta-som\Desktop\AD-Assessment.ps1:2194 char:57
+                         $GroupName = $GroupDN -replace '^CN=([^,]+),. ...
+                                                         ~~~~
Unexpected token '^CN=' in expression or statement.
At C:\Users\aa-vnasta-som\Desktop\AD-Assessment.ps1:2194 char:57
+                         $GroupName = $GroupDN -replace '^CN=([^,]+),. ...
+                                                         ~~~~
Missing closing ')' after expression in 'if' statement.
At C:\Users\aa-vnasta-som\Desktop\AD-Assessment.ps1:2194 char:63
+ ...                        $GroupName = $GroupDN -replace '^CN=([^,]+),.* ...
+                                                                  ~
Missing type name after '['.
At C:\Users\aa-vnasta-som\Desktop\AD-Assessment.ps1:2194 char:64
+ ...                      $GroupName = $GroupDN -replace '^CN=([^,]+),.*$' ...
+                                                                 ~
Missing argument in parameter list.
At C:\Users\aa-vnasta-som\Desktop\AD-Assessment.ps1:2328 char:112
+ ... mputer: $(Get-ADSIProperty -SearchResult $Result -PropertyName 'cn')"
+                                                                     ~~~~~
Unexpected token 'cn')"
        }

        try {
            # Get computer properties using ADSI
            $ComputerName = Get-ADSIProperty -SearchResult $Result -PropertyName "cn"
            $DNSHostName = Get-ADSIProperty -SearchResult $Result -PropertyName "dnshostname"
            $OSVersion = Get-ADSIProperty -SearchResult $Result -PropertyName "operatingsystem"
            $OSVersionNumber = Get-ADSIProperty -SearchResult $Result -PropertyName "operatingsystemversion"
            $Description = Get-ADSIProperty -SearchResult $Result -PropertyName "description"
            $DistinguishedName = Get-ADSIProperty -SearchResult $Result -PropertyName "distinguishedname"
            $Location = Get-ADSIProperty -SearchResult $Result -PropertyName "location"

            # Convert timestamps using ADSI
            $LastLogonDate = $null
            $LastLogonRaw = Get-ADSIProperty -SearchResult $Result -PropertyName "lastlogontimestamp"
            if ($LastLogonRaw) {
                $LastLogonDate = Convert-ADSILargeInteger -LargeInteger $LastLogonRaw
            }

            $WhenCreated = Get-ADSIProperty -SearchResult $Result -PropertyName "whencreated"

            # Use ADUAC enumeration for computer UAC analysis
            $UAC = Get-ADSIProperty -SearchResult $Result -PropertyName "useraccountcontrol"
            if (!$UAC) { $UAC = 0 }
            $UACAnalysis = Get-UACSummary -UACValue $UAC

            # Determine OS type and compliance
            $OSType = if ($OSVersion -like "*Server*") { "Server" } else { "Workstation" }
            $IsCompliant = $false
            $IsSupported = $false
            $OSCategory = "Unknown"

            # Enhanced OS compliance check
            switch -Regex ($OSVersion) {
                "Server 2022" { $IsCompliant = $true; $IsSupported = $true; $OSCategory = "Modern" }
                "Server 2019" { $IsCompliant = $true; $IsSupported = $true; $OSCategory = "Modern" }
                "Server 2016" { $IsCompliant = $true; $IsSupported = $true; $OSCategory = "Modern" }
                "Windows 11" { $IsCompliant = $true; $IsSupported = $true; $OSCategory = "Modern" }
                "Windows 10" { $IsCompliant = $true; $IsSupported = $true; $OSCategory = "Modern" }
                "Server 2012 R2" { $IsCompliant = $false; $IsSupported = $true; $OSCategory = "Legacy-Supported" }
                "Server 2012" { $IsCompliant = $false; $IsSupported = $true; $OSCategory = "Legacy-Supported" }
                "Windows 8.1" { $IsCompliant = $false; $IsSupported = $true; $OSCategory = "Legacy-Supported" }
                "Windows 8" { $IsCompliant = $false; $IsSupported = $false; $OSCategory = "End-of-Life" }
                "Server 2008 R2" { $IsCompliant = $false; $IsSupported = $false; $OSCategory = "End-of-Life" }
                "Server 2008" { $IsCompliant = $false; $IsSupported = $false; $OSCategory = "End-of-Life" }
                "Windows 7" { $IsCompliant = $false; $IsSupported = $false; $OSCategory = "End-of-Life" }
                "Vista" { $IsCompliant = $false; $IsSupported = $false; $OSCategory = "End-of-Life" }
                "Server 2003" { $IsCompliant = $false; $IsSupported = $false; $OSCategory = "End-of-Life" }
                "Windows XP" { $IsCompliant = $false; $IsSupported = $false; $OSCategory = "End-of-Life" }
                "Windows 2000" { $IsCompliant = $false; $IsSupported = $false; $OSCategory = "End-of-Life" }
                default { $OSCategory = "Unknown" }
            }

            # Check if computer is active using configurable threshold
            $IsEnabled = !$UACAnalysis.IsDisabled
            $IsActive = $false
            if ($LastLogonDate) {
                $IsActive = $LastLogonDate -gt $InactiveThreshold
            }

            $ComputerObject = [PSCustomObject]@{
                ComputerName = $ComputerName
                DNSHostName = $DNSHostName
                Enabled = $IsEnabled
                OperatingSystem = $OSVersion
                OperatingSystemVersion = $OSVersionNumber
                OSType = $OSType
                OSCategory = $OSCategory
                IsCompliant = $IsCompliant
                IsSupported = $IsSupported
                IsActive = $IsActive
                LastLogonDate = $LastLogonDate
                WhenCreated = $WhenCreated
                Description = $Description
                DistinguishedName = $DistinguishedName
                Location = $Location

                # Enhanced with ADUAC analysis
                UserAccountControl = $UAC
                UACFlags = $UACAnalysis.FlagsString
                TrustedForDelegation = $UACAnalysis.TrustedForDelegation
                IsDisabled = $UACAnalysis.IsDisabled
            }

            $AllComputers += $ComputerObject

            # Export in configurable batches
            if ($AllComputers.Count -ge ($Global:Config.OutputSettings.ExportBatchSize / 2)) {
                $AllComputers | Export-Csv "$Global:OutputPath\Computers_Standard.csv" -NoTypeInformation -Append
-Encoding UTF8
                $AllComputers = @()
            }

        } catch {
            Write-Log "Error processing computer $(Get-ADSIProperty -SearchResult $Result -PropertyName 'cn'):
$($_.Exception.Message)"
        }
    }

    # Export remaining computers
    if ($AllComputers.Count -gt 0) {
        $AllComputers | Export-Csv "$Global:OutputPath\Computers_Standard.csv" -NoTypeInformation -Append -Encoding
UTF8
    }

    # Clean up ADSI resources
    $Results.Dispose()
    $Searcher.Dispose()

    Write-Progress -Activity "Processing AD Computers (Standard)" -Completed
    Write-Log "Computer processing completed. Generating OS summary..."

    # Generate OS Summary
    $ComputersData = Import-Csv "$Global:OutputPath\Computers_Standard.csv"

    $OSSummary = $ComputersData | Group-Object OperatingSystem |
        Select-Object @{N='OperatingSystem';E={$_.Name}}, Count |
        Sort-Object Count -Descending

    $OSSummary | Export-Csv "$Global:OutputPath\Computers_OS_Summary.csv" -NoTypeInformation -Encoding UTF8

    # Computer Statistics
    $ComputerStats = [PSCustomObject]@{
        TotalComputers = $ComputersData.Count
        ActiveComputers = ($ComputersData | Where-Object {$_.IsActive -eq "True"}).Count
        CompliantComputers = ($ComputersData | Where-Object {$_.IsCompliant -eq "True"}).Count
        NonCompliantComputers = ($ComputersData | Where-Object {$_.IsCompliant -eq "False"}).Count
        EndOfLifeComputers = ($ComputersData | Where-Object {$_.OSCategory -eq "End-of-Life"}).Count
        Servers = ($ComputersData | Where-Object {$_.OSType -eq "Server"}).Count
        Workstations = ($ComputersData | Where-Object {$_.OSType -eq "Workstation"}).Count
        ConfiguredInactiveThreshold = $Global:Config.InactiveComputerDays
        ProcessingTime = ((Get-Date) - $ScriptStartTime).TotalMinutes
    }

    $ComputerStats | Export-Csv "$Global:OutputPath\Computers_Summary_Stats.csv" -NoTypeInformation -Encoding UTF8

    Write-Log "Computer assessment completed in $([math]::Round($ComputerStats.ProcessingTime, 2)) minutes using
$($Global:Config.InactiveComputerDays) day threshold (ADSI)"

    [GC]::Collect()
}
#endregion
#region Configuration Export Function
function Export-ConfigurationTemplate {
    $ConfigTemplate = @'' in expression or statement.
At C:\Users\aa-vnasta-som\Desktop\AD-Assessment.ps1:2560 char:59
+     Write-Host "Customize this file for your organization's specific  ...
+                                                           ~
Unexpected token 's' in expression or statement.
At C:\Users\aa-vnasta-som\Desktop\AD-Assessment.ps1:2638 char:22
+ =====================
+                      ~
Missing '{' in configuration statement.
At C:\Users\aa-vnasta-som\Desktop\AD-Assessment.ps1:2645 char:15
+ Configuration Source: $(if ($ConfigFile) { "File: $ConfigFile" } else ...
+               ~~~~~~~
The configuration name 'Source:' is not valid. Standard names may only contain letters (a-z, A-Z), numbers (0-9),
period (.), hyphen (-) and underscore (_). The name may not be null or empty, and should start with a letter.
At C:\Users\aa-vnasta-som\Desktop\AD-Assessment.ps1:2645 char:25
+ Configuration Source: $(if ($ConfigFile) { "File: $ConfigFile" } else ...
+                         ~
Missing '{' in configuration statement.
At C:\Users\aa-vnasta-som\Desktop\AD-Assessment.ps1:2100 char:41
+             foreach ($Share in $Shares) {
+                                         ~
Missing closing '}' in statement block or type definition.
Not all parse errors were reported.  Correct the reported errors and try again.
    + CategoryInfo          : ParserError: (:) [], ParseException
    + FullyQualifiedErrorId : UnexpectedToken
